import { BrowserRouter, Routes, Route } from 'react-router-dom';
import { useState, useEffect } from 'react';
import GlobalStyles from './GlobalStyles';
import Preloader from './components/Preloader';
import Header from './components/Header';
import ArticleView from './pages/ArticleView';
import SobreMimPage from './pages/SobreMimPage';

const article1 = {
  id: 'reactxangularxvue',
  title: 'Qual melhor Framework apÃ³s aprender JavaScript?',
  date: '20/02/2024',
  image: '/angualrvuereact.png',
  content: [
    '1. React: A Deusa da Reatividade',
    'React, desenvolvido pelo Facebook, Ã© um framework que revolucionou a construÃ§Ã£o de interfaces de usuÃ¡rio. A base do React reside na ideia de componentizaÃ§Ã£o, onde a interface Ã© quebrada em componentes reutilizÃ¡veis. O Virtual DOM, uma abstraÃ§Ã£o leve do DOM real, otimiza as atualizaÃ§Ãµes, resultando em desempenho excepcional em aplicaÃ§Ãµes de larga escala.',
    'A comunidade React Ã© extensa e diversificada, proporcionando nÃ£o apenas suporte tÃ©cnico, mas tambÃ©m uma mirÃ­ade de recursos, tutoriais e soluÃ§Ãµes para desafios comuns. A sintaxe JSX, uma extensÃ£o do JavaScript que permite a incorporaÃ§Ã£o de XML/HTML, oferece uma abordagem elegante e eficiente na construÃ§Ã£o de componentes.',
    'Para comeÃ§ar, a DocumentaÃ§Ã£o Oficial do React Ã© um guia abrangente. No Tutorial Interativo, vocÃª pode construir uma aplicaÃ§Ã£o passo a passo, consolidando seu entendimento prÃ¡tico.',
    '',
    '',
    '2. Angular: O Gigante MVC',
    'Angular, mantido pelo Google, Ã© uma escolha sÃ³lida para projetos de grande escala. Baseado no padrÃ£o de design MVC, Angular proporciona uma estrutura organizada, dividindo a aplicaÃ§Ã£o em Model, View e Controller. A injeÃ§Ã£o de dependÃªncias facilita a modularizaÃ§Ã£o e teste de unidades.',
    'A decisÃ£o de adotar o TypeScript como linguagem principal fortalece a robustez do cÃ³digo, introduzindo tipagem estÃ¡tica. O Angular CLI simplifica a inicializaÃ§Ã£o de projetos e automaÃ§Ã£o de tarefas, enquanto a extensa documentaÃ§Ã£o oficial oferece insights profundos em cada conceito.',
    'A DocumentaÃ§Ã£o Oficial do Angular Ã© uma rica fonte de conhecimento, incluindo detalhes sobre todos os aspectos do desenvolvimento Angular. O Guia de InicializaÃ§Ã£o RÃ¡pida fornece um ponto de partida pragmÃ¡tico.',
    'Aproveite a modularizaÃ§Ã£o atravÃ©s de mÃ³dulos e serviÃ§os. O Angular CLI, alÃ©m da inicializaÃ§Ã£o, facilita a geraÃ§Ã£o de componentes, mÃ³dulos e serviÃ§os, tornando-o uma ferramenta indispensÃ¡vel.',
    '',
    '',
    '3. Vue.js: A ElegÃ¢ncia da Simplicidade',
    'Vue.js se destaca pela sua abordagem incremental e simplicidade. Desenvolvido para ser facilmente integrado em projetos existentes, Vue.js oferece reatividade eficiente, sem a complexidade de outras soluÃ§Ãµes.',
    'A flexibilidade do Vue.js Ã© evidente em sua sintaxe limpa e na curva de aprendizado suave. O sistema de reatividade, inspirado no React, torna as atualizaÃ§Ãµes de interface rÃ¡pidas e eficazes. O Vue CLI agiliza a inicializaÃ§Ã£o de projetos, enquanto o Vuex oferece um robusto gerenciamento de estado.',
    'A DocumentaÃ§Ã£o Oficial do Vue.js Ã© um guia completo para iniciantes e desenvolvedores avanÃ§ados. O Guia de Componentes explora detalhes especÃ­ficos sobre construÃ§Ã£o e reutilizaÃ§Ã£o de componentes Vue.',
    'Para inicializaÃ§Ã£o rÃ¡pida, o Vue CLI oferece configuraÃ§Ãµes predefinidas e personalizÃ¡veis. Em projetos mais extensos, a integraÃ§Ã£o do Vuex para gerenciamento de estado centralizado Ã© altamente recomendada.',
    '',
    'ConclusÃ£o: Rumo Ã  ExcelÃªncia no Desenvolvimento Web e Desenvolvimento Front-end',
    'Em suma, a escolha entre React, Angular e Vue.js Ã© uma decisÃ£o estratÃ©gica que moldarÃ¡ sua jornada no desenvolvimento web. Aprofundar-se em cada framework Ã© mais do que uma simples escolha tÃ©cnica; Ã© uma oportunidade de crescimento, aprendizado e domÃ­nio. A documentaÃ§Ã£o oficial, comunidades online e prÃ¡tica constante sÃ£o seus aliados nesta jornada. Ao escolher e explorar um desses frameworks, vocÃª nÃ£o apenas eleva suas habilidades de desenvolvimento, mas tambÃ©m se torna parte de uma comunidade vibrante e inovadora. Que sua jornada seja repleta de descobertas e conquistas extraordinÃ¡rias!'
  ],
};

const article2 = {
  id: 'styledcomponents',
  title: 'Aprenda CSS-IN-JS com Styled Components.',
  date: '21/02/2024',
  image: '/styledcomponentsbanner.png',
  content: [
    'CSS-IN-JS com Styled Components: Desvendando a Magia da EstilizaÃ§Ã£o em React',
    '',
    'Se aventurar no vasto mundo do desenvolvimento front-end muitas vezes significa enfrentar o desafio de lidar com estilos e estilizaÃ§Ã£o de maneira eficiente. Ã‰ nesse contexto que surge a tÃ©cnica revolucionÃ¡ria conhecida como CSS-IN-JS, e uma das ferramentas mais poderosas para incorporÃ¡-la em projetos React Ã© o Styled Components.',
    '',
    'O que Ã© CSS-IN-JS?',
    '',
    'Antes de mergulharmos nas maravilhas do Styled Components, Ã© essencial compreender o conceito por trÃ¡s do CSS-IN-JS. Essa abordagem inovadora propÃµe a ideia de escrever estilos diretamente no escopo do JavaScript, eliminando assim a necessidade de arquivos de estilo separados. Isso nÃ£o apenas simplifica a organizaÃ§Ã£o do cÃ³digo, mas tambÃ©m proporciona um escopo encapsulado para os estilos, evitando conflitos.',
    '',
    'Styled Components: Uma RevoluÃ§Ã£o na EstilizaÃ§Ã£o em React',
    '',
    'Styled Components Ã© uma biblioteca para React que leva o CSS-IN-JS a um novo patamar. Ao utilizar a sintaxe elegante e expressiva do JavaScript para definir estilos, vocÃª cria componentes React estilizados de maneira intuitiva e dinÃ¢mica.',
    '',
    'Principais Vantagens:',
    '',
    '1. Encapsulamento Natural: Cada componente Styled Components encapsula seus estilos, evitando vazamento de estilos indesejados.',
    '2. InterpolaÃ§Ã£o DinÃ¢mica: A integraÃ§Ã£o perfeita de JavaScript permite interpolaÃ§Ã£o dinÃ¢mica nos estilos, adaptando-se facilmente a diferentes estados e propriedades.',
    '3. ManutenÃ§Ã£o Simplificada: Com estilos prÃ³ximos ao cÃ³digo que os utiliza, a manutenÃ§Ã£o torna-se mais intuitiva e menos propensa a erros.',
    '4. Reaproveitamento Eficiente: A reutilizaÃ§Ã£o de estilos Ã© facilitada, promovendo uma abordagem DRY (Don\'t Repeat Yourself).',
    '',
    'Como Utilizar:',
    '',
    'Vamos explorar um exemplo bÃ¡sico de uso do Styled Components em React:',
    '',
    '```javascript',
    'import styled from \'styled-components\';',
    '',
    'const StyledButton = styled.button`',
    '  background-color: #3498db;',
    '  color: #fff;',
    '  padding: 10px 20px;',
    '  border: none;',
    '  border-radius: 5px;',
    '  cursor: pointer;',
    '',
    '  &:hover {',
    '    background-color: #2980b9;',
    '  }',
    '`;',
    '',
    'const MyComponent = () => {',
    '  return (',
    '    <div>',
    '      <h1>Explorando Styled Components</h1>',
    '      <StyledButton>Clique em Mim</StyledButton>',
    '    </div>',
    '  );',
    '};',
    '```',
    '',
    'ConclusÃ£o:',
    '',
    'Ao dominar CSS-IN-JS com Styled Components, vocÃª abre as portas para um desenvolvimento front-end mais elegante, modular e fÃ¡cil de manter. Esta poderosa combinaÃ§Ã£o nÃ£o apenas transforma a estilizaÃ§Ã£o em uma experiÃªncia mais agradÃ¡vel, mas tambÃ©m impulsiona a eficiÃªncia do seu cÃ³digo React.',
    '',
    'Esteja preparado para explorar um novo mundo de possibilidades estilÃ­sticas enquanto eleva a qualidade e a legibilidade do seu cÃ³digo. Que sua jornada em Styled Components seja tÃ£o empolgante quanto os resultados visuais incrÃ­veis que vocÃª estÃ¡ prestes a conquistar! ðŸš€âœ¨',
  ],
};

const articles = [article1, article2];

const App = () => {
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      await new Promise(resolve => setTimeout(resolve, 2700));
      setLoading(false); 
    };
    fetchData();
  }, []); 

  return (
    <BrowserRouter>
      {loading ? <Preloader /> :
        <div>
          <GlobalStyles />
          <Header />
          <Routes>
            <Route path='/' element={<SobreMimPage />} />
            {articles.map((article) => (
              <Route
                key={article.id}
                path={`/${article.id}`}
                element={<ArticleView {...article} />}
              />
            ))}
          </Routes>
      </div>}
    </BrowserRouter>
  );
};

export default App;
